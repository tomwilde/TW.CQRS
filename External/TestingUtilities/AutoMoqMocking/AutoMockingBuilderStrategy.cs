using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Practices.ObjectBuilder2;
using Moq;

namespace TW.Commons.TestingUtilities.AutoMoqMocking
{
    public class AutoMockingBuilderStrategy : BuilderStrategy
    {
        private readonly List<Mock> allUnhandledMocks = new List<Mock>();
        private readonly List<Type> typesHandledByContainer = new List<Type>();

        private Type parentType;

        public void SetCurrentType(Type type)
        {
            parentType = type;
        }

        public AutoMockingBuilderStrategy()
        {
            
        }

        public override void PreBuildUp(IBuilderContext context)
        {
            var key = (NamedTypeBuildKey)context.OriginalBuildKey;

            if (key.Type == parentType) return;
            
            if (!IsRegistered(key.Type) && !typesHandledByContainer.Contains(key.Type))
            {
                var mock = Activator.CreateInstance(typeof(Mock<>).MakeGenericType(key.Type));

                var obj = mock.GetType()
                              .GetProperties()
                              .First(p => p.PropertyType == key.Type)
                              .GetValue(mock, null);

                allUnhandledMocks.Add(mock as Mock);

                context.Existing = obj;
            }
        }

        private bool IsRegistered(Type type)
        {
            return allUnhandledMocks.FindAll(m => m.Object.GetType() == type).Any();
        }

        public void VerifyAutoGeneratedMocks()
        {
            allUnhandledMocks.ForEach(mock => mock.VerifyAll());
        }

        public void AddNonMockedType<T>()
        {
            typesHandledByContainer.Add(typeof(T));
        }
    }
}